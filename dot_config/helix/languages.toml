[[language]]
name = "python"
language-id = "python"
roots = ["pyproject.toml", "poetry.lock", ".git", ".venv/"]
language-servers = ["ruff", "basedpyright"]
formatter = { command = "uvx", args = ["ruff", "check", "--fix", "-"] }
file-types = ["py", "ipynb"]
comment-token = "#"
shebangs = ["python"]
auto-format = true

[language-server.ruff]
command = "uvx"
args = ["ruff", "server"]
environment = { "RUFF_TRACE" = "messages" }

[language-server.ruff.config.settings]
lineLength = 100
logLevel = "debug"
fix = true

[language-server.ruff.config.settings.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "B",     # flake8-bugbear
    "I",     # isort
    "RUF",   # ruff
    "D",     # docstrings
    "UP",    # pyupgrade
    "ANN",   # annotations
    "ASYNC", # async checks
    "S",     # bandit (security)
    "YTT",   # datetime checks
    "A",     # builtins shadowing
    "RET",   # return statements
    "TCH",   # type-checking
    "ARG",   # function args
    "PTH",   # pathlib over os.path
    "ERA",   # env assumptions
    "LOG",   # logging practices
    "N",     # naming
    "C4",    # comprehensions
    "T10",   # debugger usage
    "SIM",   # simplify code
    "TRY",   # try/except
    "C90",   # complexity
    "PGH",   # pattern hooks
]
ignore = [
    "E501",  # line too long
    "E731",  # do not assign lambda
    "D205",  # docstrings blank line spacing
    "D100",  # missing docstring in public module    
    "D104",  # missing docstring in public package
]

[tool.ruff.lint.per-file-ignores]
"src/tests/*" = ["S101", "D103"] # allow assertions, allow missing docstrings

[language-server.ruff.config.settings.format]
quote-style = "double"
docstring-code-format = true
indent-style = "space"

[language-server.basedpyright]
command = "uvx"
args = ["--from", "basedpyright", "basedpyright-langserver", "--stdio"]

[language-server.basedpyright.config]
python.pythonPath = ".venv/bin/python"

[language-server.basedpyright.config.basedpyright.analysis]
autoSearchPaths = true
typeCheckingMode = "basic"
diagnosticMode = "openFilesOnly"
autoImportCompletions = true

[[language]]
name = "json"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "json"] }

[[language]]
language-servers = ["marksman", "mpls", "iwe"]
name = "markdown"
soft-wrap.enable = true
auto-format = true

[language-server.mpls]
command = "mpls"
args = ["--no-auto", "--dark-mode", "--enable-emoji", "--enable-wikilinks", "--full-sync"]

[language-server.iwe]
command = "iwes"

[[language]]
name = "yaml"
indent = { tab-width = 2, unit = "  " }
formatter = { command = "prettier", args = ["--parser", "yaml"] }

[[language]]
name = "toml"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "toml"] }
